import { Product } from "./modelProduct.js";
import { Cart } from "./modelCart.js";
import { Header } from "./header.js";
import { Footer } from "./footer.js";
const API="http://localhost:3000/products"
const courseForm = document.getElementById('course-form');
const courseNameInput = document.getElementById('course-name');
const courseDescriptionInput = document.getElementById('course-description');
const courseModal = document.getElementById('course-modal');
const openAddCourseModal = document.getElementById('open-add-course-modal');
const courseList = document.getElementById("course-list"); // tbody ch·ª©a danh s√°ch s·∫£n ph·∫©m
//class s·∫£n ph·∫©m
const urlParams = new URLSearchParams(window.location.search)

//Show trang ch·ªß
const productHot = document.getElementById('product-hot');
const productPhone = document.getElementById('product-phone');
const productLaptop = document.getElementById('product-laptop');
if (productHot) {
  fetch(API)
    .then(response => response.json())
    .then(data => {
      console.log(data);
      //Show m·∫£ng data v√†o trong th·∫ª content
      const dataHot = data.filter(p => p.hot == true);
      const dataLaptop = data.filter(p => p.category === "laptop");
      const dataPhone = data.filter(p => p.category === "ƒëi·ªán tho·∫°i");
      // Show s·∫£n ph·∫©m n·ªïi b·∫≠t
      let html = "";
      dataHot.forEach((item) => {
        const product = new Product(
          item.id,
          item.name,
          item.price,
          item.image,
          item.category,
          item.hot,
          item.description
        )
        html += product.render();
      })
      productHot.innerHTML = html;
      // Show s·∫£n ph·∫©m laptop
      html = "";
      dataLaptop.forEach((item) => {
        const product = new Product(
          item.id,
          item.name,
          item.price,
          item.image,
          item.category,
          item.hot,
          item.description
        )
        html += product.render();
      })
      productLaptop.innerHTML = html;
      // show s·∫£n ph·∫©m ƒëi·ªán tho·∫°i
      html = "";
      dataPhone.forEach((item) => {
        const product = new Product(
          item.id,
          item.name,
          item.price,
          item.image,
          item.category,
          item.hot,
          item.description
        )
        html += product.render();
      })
      productPhone.innerHTML = html;
    })
}

// show trang s·∫£n ph·∫©m
const productAll = document.getElementById('all-product');

const sortPrice = document.getElementById('sort-price');
let allProductsData = [];
if (productAll) {
  const category = urlParams.get("category");
  
  fetch(API)
    .then(response => response.json())
    .then(data => {
      let listData = data; // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã t·∫•t c·∫£

      // üî∏ L·ªçc theo danh m·ª•c n·∫øu c√≥ "category" trong URL
      if (category == 1) {
       listData = data.filter(i => i.category && i.category.toLowerCase() === "ƒëi·ªán tho·∫°i");
      } 
      else if (category == 2) {
        listData = data.filter(i => i.category && i.category.toLowerCase()  === "laptop");
      } 
      else if (category == 3) {
        listData = data.filter(i => i.category && i.category.toLowerCase()  === "ph·ª• ki·ªán");
      }

      // Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m ban ƒë·∫ßu
      renderProduct(listData, productAll);
      
      // L∆∞u to√†n b·ªô d·ªØ li·ªáu v√†o bi·∫øn to√†n c·ª•c ƒë·ªÉ d√πng l·∫°i khi t√¨m ki·∫øm/s·∫Øp x·∫øp
      allProductsData = listData;
    })
    .catch(error => console.error("L·ªói khi t·∫£i d·ªØ li·ªáu:", error));

  // üîç T√¨m ki·∫øm s·∫£n ph·∫©m


  // üí∏ S·∫Øp x·∫øp theo gi√°

}

const renderProduct = (array, theDiv) => {
  let html = "";
  array.forEach((item) => {
    const product = new Product(
      item.id,
      item.name,
      item.price,
      item.image,
      item.category,
      item.hot,
      item.description
    )
    html += product.render();
  })
  theDiv.innerHTML = html;
}

const productDetailDiv = document.getElementById('product-detail');
if (productDetailDiv) {
  //l·∫•y id t·ª´ url
  ;
  const id = urlParams.get('id');
  console.log(id);
  fetch(`${API}/${id}`)
    .then(response => response.json())
    .then(item => {
      console.log(item);
      const product = new Product(
        item.id,
        item.name,
        item.price,
        item.image,
        item.category,
        item.hot,
        item.description
      )
      productDetailDiv.innerHTML = product.renderDetail();
    });
}

// Gi·ªè h√†ng
// ---------------- Header ----------------
Header()

// ---------------- Footer ----------------
Footer()

// ---------------- Cart ----------------
// ---------------- Cart ----------------

// Kh·ªüi t·∫°o gi·ªè h√†ng
const cart = new Cart();
cart.render();
cart.updateCartCount();

// Event: th√™m v√†o gi·ªè h√†ng
document.addEventListener('click', e => {
  const btn = e.target.closest('.addCartBtn');
  if (!btn) return;

  const productId = btn.dataset.productId;

  fetch(`${API}/${productId}`)
    .then(res => res.json())
    .then(product => {
      cart.addItem({
        id: product.id.toString(),
        name: product.name,
        price: product.price,
        image: product.image,
        category: product.category,
        hot: product.hot,
        description: product.description,
      });
      cart.render();
      cart.updateCartCount();
      alert(`üõí ƒê√£ th√™m "${product.name}" v√†o gi·ªè h√†ng!`);
    })
    .catch(err => console.error("L·ªói th√™m s·∫£n ph·∫©m:", err));
});
// Event: x√≥a s·∫£n ph·∫©m
document.addEventListener('click', e => {
  if (e.target.closest('.remove-btn')) {
    const id = e.target.closest('.remove-btn').dataset.id;
    cart.removeItem(id);
  }
});

// Event: c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
document.addEventListener('input', e => {
  if (e.target.classList.contains('qty-input')) {
    const id = e.target.dataset.id;
    const qty = parseInt(e.target.value);
    cart.updateQuantity(id, qty);
  }
});
// Render gi·ªè h√†ng khi DOM s·∫µn s√†ng
document.addEventListener('DOMContentLoaded', () => {
  cart.render();
});

// DOM elements

let editingCourseId = null;
// Class Course

// H√†m fetch v√† render s·∫£n ph·∫©m
function fetchProducts() {
    if(courseList){
        fetch(API)
            .then(response => response.json())
            .then(courses => {
                let html = "";
                courses.forEach(item => {
                    const course = new Product(
                        item.id,
                        item.name,
                        item.price,
                        item.image,
                        item.category, 
                        item.hot,
                        item.description
                    );
                    html += course.renderAdmin();
                });
                courseList.innerHTML = html;
            })
            .catch(err => console.error("L·ªói t·∫£i s·∫£n ph·∫©m:", err));
    }
}

// G·ªçi l·∫ßn ƒë·∫ßu
fetchProducts();

// Hi·ªÉn th·ªã modal th√™m s·∫£n ph·∫©m v·ªõi transition
if(openAddCourseModal){
    openAddCourseModal.addEventListener('click', () => {
        courseModal.classList.remove('hidden');
        const modalContent = courseModal.querySelector('div');
        setTimeout(() => {
            modalContent.classList.remove('scale-95', 'opacity-0');
            modalContent.classList.add('scale-100', 'opacity-100');
        }, 10);
    });
}

// ƒê√≥ng modal khi click n√∫t & reset form
const closeCourseModal = document.getElementById('close-course-modal');
if(closeCourseModal){
    closeCourseModal.addEventListener('click', () => {
        const modalContent = courseModal.querySelector('div');
        modalContent.classList.remove('scale-100','opacity-100');
        modalContent.classList.add('scale-95','opacity-0');
        setTimeout(()=> courseModal.classList.add('hidden'), 200);
        courseForm.reset();
    });
}

// Th√™m s·∫£n ph·∫©m m·ªõi

  
if (courseList) {
    courseList.addEventListener('click', (e) => {
        if (e.target.closest('.delete-button')) {
            const id = e.target.closest('.delete-button').dataset.id;
            if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y kh√¥ng?")) {
                fetch(`${API}/${id}`, { method: 'DELETE' })
                  .then(() => {
                      alert("X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!");
                      fetchProducts();
                  })
                  .catch(err => console.error("L·ªói x√≥a s·∫£n ph·∫©m:", err));
            }
        }
    });
}

courseForm.addEventListener('submit', (event) => {
  event.preventDefault();

  const courseData = {
    name: courseNameInput.value,
    price: document.getElementById('course-price').value,
    category: document.getElementById('course-category').value, 
    hot: document.getElementById('course-hot').checked,
    description: courseDescriptionInput.value
  };

  const fileInput = document.getElementById('course-image');
  const file = fileInput.files[0];

  // N·∫øu ƒëang s·ª≠a s·∫£n ph·∫©m
  if (editingCourseId) {
    if (file) {
      // N·∫øu c√≥ file m·ªõi, ƒë·ªçc Base64 r·ªìi PUT
      const reader = new FileReader();
      reader.onload = function(e) {
        courseData.image = e.target.result;
        fetch(`${API}/${editingCourseId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(courseData)
        })
          .then(res => res.json())
          .then(() => {
            alert("C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!");
            fetchProducts();
            editingCourseId = null;
            closeCourseModal.click();
          })
          .catch(err => console.error("L·ªói c·∫≠p nh·∫≠t:", err));
      };
      reader.readAsDataURL(file);
    } else {
      // N·∫øu kh√¥ng c√≥ file m·ªõi, gi·ªØ nguy√™n ·∫£nh c≈©
      courseData.image = fileInput.dataset.current || '';
      fetch(`${API}/${editingCourseId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(courseData)
      })
        .then(res => res.json())
        .then(() => {
          alert("C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!");
          fetchProducts();
          editingCourseId = null;
          closeCourseModal.click();
        })
        .catch(err => console.error("L·ªói c·∫≠p nh·∫≠t:", err));
    }
  }

  // N·∫øu th√™m s·∫£n ph·∫©m m·ªõi
  else {
    if (file) {
      const reader = new FileReader();
      reader.onload = function(e) {
        const newCourse = {
          ...courseData,
          image: e.target.result,
          id: Date.now().toString()
        };
        fetch(API, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(newCourse)
        })
          .then(res => res.json())
          .then(() => {
            alert("Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!");
            fetchProducts();
            closeCourseModal.click();
          })
          .catch(err => console.error("L·ªói th√™m:", err));
      };
      reader.readAsDataURL(file);
    } else {
      alert("Vui l√≤ng ch·ªçn h√¨nh ·∫£nh s·∫£n ph·∫©m!");
    }
  }
});
// Khai b√°o bi·∫øn tr·∫°ng th√°i s·ª≠a

// Khi b·∫•m n√∫t S·ª≠a
courseList.addEventListener("click", (e) => {
  const editBtn = e.target.closest(".edit-button");
  if (!editBtn) return;

  const id = editBtn.dataset.id;
  editingCourseId = id;

  // üîπ Hi·ªán modal + hi·ªáu ·ª©ng
  courseModal.classList.remove("hidden");
  const modalContent = courseModal.querySelector("div");
  setTimeout(() => {
    modalContent.classList.remove("scale-90", "opacity-0");
    modalContent.classList.add("scale-100", "opacity-100");
  }, 10);

  // üîπ L·∫•y d·ªØ li·ªáu t·ª´ API v√† ƒë·ªï v√†o form
  fetch(`${API}/${id}`)
    .then(res => res.json())
    .then(course => {
      
      document.getElementById("course-id").value = course.id;
      document.getElementById("course-name").value = course.name;
      document.getElementById("course-price").value = course.price;
      document.getElementById("course-category").value = course.category;
      document.getElementById("course-hot").checked = course.hot;
      document.getElementById("course-description").value = course.description;

      // üîπ Reset input file (v√¨ kh√¥ng ƒë∆∞·ª£c set value ·∫£nh)
      document.getElementById("course-image").value = "";
    })
    .catch(err => console.error("L·ªói t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m:", err));
});
// Khi submit form, ph√¢n bi·ªát th√™m/s·ª≠a
// Khi submit form, ph√¢n bi·ªát th√™m/s·ª≠a
const openLogin=document.getElementById('open-login-modal')
const login_modal=document.getElementById('login-modal')
const close_login_modal=document.getElementById('close-login-modal')



// mo form
openLogin.addEventListener('click',()=>{
  login_modal.classList.remove('hidden')
 
})
 close_login_modal.addEventListener('click',()=>{
    login_modal.classList.add("hidden")
  })